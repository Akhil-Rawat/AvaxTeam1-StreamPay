/**
 * This file was automatically generated by Stylus and represents a Rust program.
 * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).
 */

// SPDX-License-Identifier: MIT-OR-APACHE-2.0
pragma solidity ^0.8.23;

interface ISubscriptionEscrow  {
    function initialize() external returns (bool);

    function registerProvider(string calldata name) external returns (bool);

    function createPlan(uint256 price, uint256 interval, string calldata _metadata_hash) external returns (uint256);

    function subscribe(uint256 plan_id) external payable returns (uint256);

    function processSubscriptionPayment(uint256 subscription_id) external returns (bool);

    function getUserBalance(address user) external view returns (uint256);

    function isProviderRegistered(address provider) external view returns (bool);

    function getPlans() external view returns (uint256[] memory);

    function deposit() external payable returns (bool);

    function withdraw(uint256 amount) external returns (bool);

    function requireRegisteredProvider(address provider) external view;

    error Unauthorized();

    error InvalidInput();

    error InsufficientFunds();

    error NotFound();
}
